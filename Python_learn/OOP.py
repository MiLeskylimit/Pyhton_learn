# 1. 面向对象概述
- OOP思想
    -接触
-





# 2.累的基本实现
- 类的基本命名
    - 遵循变量命名的规范
    - 大驼峰（由一个或者多个单词构成，每个单词首字母大写，单词跟单词直接相连
    - 尽量避免跟系统命名相似的命名
- 声明一个类
    - 必须用class关键字
    - 类由属性和方法构成，其他不允许出现
    - 成员属性定义可以直接使用变量赋值，如果没有值，可使用None
    - a案例 01.py
- 实例化类

        变量　＝　类名（）# 实例化一个对象
- 访问对象成员
    - 使用点操作符

        obj.成员属性方法
        obj.成员方法
- 可以通过默认内置变量检查类和对象的所有成员
    - 对象成员检查

        # dict前后各有两个下划线
        obj.__dict__
    - 类所有成员

        # dict前后各有两个下划线
        class_name.__dict__
        

# ３.anaconda基本使用
- anaconda主要事一个虚拟环境管理器
- 还是一个安装包管理器
- conda list: 显示anaconda安装包
- conda create -n xxx oop python=3.6 #创建一个python 3.6的虚拟环境

# 4. 类和对象的成员分析
- 类和对象都可以存储成员，成员可以归类所有，也可以归对象所有
- 类存储成员时使用的是与类关联的一个对象
- 独享存储成员是存储在当前对象中
- 对象访问一个成员时，如果对象中没有该成员，尝试访问类中的同名成员．
    如果对象中有此成员，一定使用对象中的成员
- 创建对象的时候，类中的成员不会放入对象当中，而是得到一个空对象，没有成员
- 通过对象类中成员重新赋值或者通过对象添加成员时，对应成员会保存在对象中，而不会修改类成员

# 5.关于self
- self 在对象的方法中表示当前对象本身，如果通过对象调用一个方法，那么该对象会自动传入当前的第一个参数中
- self 不是关键字，只是一个用于接受对象的普通参数，理论上可以用任何一个普通变量代替
- 方法中的self形参的方法成为非绑定类的方法，可以通过对象访问，没有self形参的方法是绑定类的方法，只能通过类名访问
- 使用类访问绑定类的方法时，如果类中需要访问当期类的成员，可以通过__class__成员名来访问

# 6.面向对象的三大特性
- 封装
- 继承
- 多态
　

